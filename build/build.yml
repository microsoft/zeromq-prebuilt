parameters:
  repo: ''
  tag: ''
  python_arch: 'x64'
  npm_config_arch: 'x64'
  node_version: '20.x'
  ARCH: 'x64'
  artifact_name: ''
  prebuild_folder_name: ''
  build: true
  test: true
  install_node: true
  yum_install_python: false
  output_node_file: ''

steps:
- task: NodeTool@0
  condition: eq('${{ parameters.install_node }}', 'true')
  inputs:
    versionSource: 'spec'
    versionSpec: ${{ parameters.node_version }}

- task: UsePythonVersion@0
  condition: eq('${{ parameters.yum_install_python }}', 'false')
  displayName: Use Python 3 ${{ parameters.python_arch }}
  inputs:
    versionSpec: '3.11'
    addToPath: true
    architecture: ${{ parameters.python_arch }}

- task: Bash@3
  condition: eq('${{ parameters.yum_install_python }}', 'true')
  displayName: Install Python3
  inputs:
    targetType: 'inline'
    script: |
      sudo yum install -y python3

- task: Bash@3
  displayName: Git Clone
  inputs:
    targetType: 'inline'
    script: |
      set -ex
      REPO=`[ "${{ parameters.repo }}" ] &&  echo ${{ parameters.repo }} || echo $(node -p "require('./config.json').zeromqRepo")`
      TREEISH=`[ "${{ parameters.tag }}" ] && echo ${{ parameters.tag }} || echo $(node -p "require('./config.json').zeromqTag")`
      git clone https://github.com/${REPO}.git zeromq.js
      cd zeromq.js
      git checkout $TREEISH

- bash: |
    node ../build/patch.js
    git apply --whitespace=fix ../build/zeromq.js.patch
    git diff
    cp ../build/libzmq.patch .
    cp ../build/libzmq-438d5d88.patch .
  displayName: Patch zeromq.js
  workingDirectory: zeromq.js

- pwsh: |
    $includes = @'
      {
        'target_defaults': {
          'conditions': [
            ['OS=="win"', {
              'msvs_settings': {
                'VCLinkerTool': {
                  'AdditionalOptions': [
                    '/profile'
                  ]
                }
              }
            }]
          ]
        }
      }
    '@

    if (!(Test-Path "~/.gyp")) {
      mkdir "~/.gyp"
      echo $includes > "~/.gyp/include.gypi"
    }
  displayName: Create include.gypi
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq('${{ parameters.ARCH }}', 'x64'))

- bash: |
    export PREBUILD_STRIP_BIN=$STRIP
    npm install -g pnpm@latest-8
    pnpm install
    npm run prebuild
  displayName: Build
  condition: and(succeeded(), eq('${{ parameters.build }}', 'true'), ne('${{ parameters.ARCH }}', ''))
  workingDirectory: zeromq.js
  env:
    ARCH: ${{ parameters.ARCH }}
    npm_config_arch: ${{ parameters.npm_config_arch }}
    PREBUILD_ARCH: ${{ parameters.ARCH }}

- bash: |
    npm install -g pnpm@latest-8
    pnpm install
    npm run prebuild
  displayName: Build (no-arch)
  condition: and(succeeded(), eq('${{ parameters.build }}', 'true'), eq('${{ parameters.ARCH }}', ''))
  workingDirectory: zeromq.js
  env:
    npm_config_arch: ${{ parameters.npm_config_arch }}

- task: CopyFiles@2
  inputs:
    Contents: |
      zeromq.js/prebuilds/${{ parameters.prebuild_folder_name }}/${{ parameters.output_node_file }}
      zeromq.js/build/libzmq/bin/*.dll
      zeromq.js/**/*.pdb
    TargetFolder: $(Agent.TempDirectory)/apiscan
  displayName: Copy files for APIScan
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq('${{ parameters.ARCH }}', 'x64'))

- task: PublishSymbols@2
  inputs:
    IndexSources: false # Unsupported source provider 'GitHub' for source indexing.
    SymbolsFolder: $(Agent.TempDirectory)/apiscan/zeromq.js/build/Release
    SearchPattern: '**\*.pdb'
    SymbolServerType: TeamServices
  displayName: Publish Symbols
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq('${{ parameters.ARCH }}', 'x64'))

- task: 1ES.PublishPipelineArtifact@1
  inputs:
    targetPath: $(Agent.TempDirectory)/apiscan/zeromq.js/build/Release
    artifactName: zeromq-prebuilt-symbols
  displayName: Publish Symbols Backup
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq('${{ parameters.ARCH }}', 'x64'))

- task: APIScan@2
  inputs:
    softwareFolder: $(Agent.TempDirectory)/apiscan
    softwareName: 'zeromq'
    softwareVersionNum: '1'
    symbolsFolder: 'srv*https://symweb.azurefd.net;$(Agent.TempDirectory)/apiscan/zeromq.js/build/Release'
    isLargeApp: false
    toolVersion: 'Latest'
    azureSubscription: 'vscode-apiscan'
  displayName: Run APIScan
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq('${{ parameters.ARCH }}', 'x64'))
  env:
    AzureServicesAuthConnectionString: RunAs=App;AppId=c0940da5-8bd3-4dd3-8af1-40774b50edbd;TenantId=72f988bf-86f1-41af-91ab-2d7cd011db47;ServiceConnectionId=3e55d992-b60d-414d-9071-e4fad359c748;
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- task: PublishSecurityAnalysisLogs@3
  inputs:
    ArtifactName: 'CodeAnalysisLogs'
    ArtifactType: 'Container'
    AllTools: true
    ToolLogsNotFoundAction: 'Standard'
  displayName: Publish security logs
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'), eq('${{ parameters.ARCH }}', 'x64'))

- ${{ if eq(parameters.build, true) }}:
  - template: artifacts.yml
    parameters:
      artifact_name: ${{ parameters.artifact_name }}
      prebuild_folder_name: ${{ parameters.prebuild_folder_name }}
      output_node_file: ${{ parameters.output_node_file }}
      test: ${{ parameters.test }}
