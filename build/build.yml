parameters:
  repo: ''
  tag: ''
  python_arch: 'x64'
  npm_config_arch: 'x64'
  ARCH: 'x64'
  artifact_name: ''
  prebuild_folder_name: ''
  build: true
  test: true
  docker: false
  output_node_file: ''

steps:
- task: NodeTool@0
  inputs:
    versionSource: 'spec'
    versionSpec: '18.x'

- task: UsePythonVersion@0
  displayName: Use Python 3 ${{ parameters.python_arch }}
  inputs:
    versionSpec: '3.x'
    addToPath: true
    architecture: ${{ parameters.python_arch }}

- task: Bash@3
  displayName: Git Clone
  inputs:
    targetType: 'inline'
    script: |
      set -ex
      REPO=`[ "${{ parameters.repo }}" ] &&  echo ${{ parameters.repo }} || echo $(node -p "require('./config.json').zeromqRepo")`
      TREEISH=`[ "${{ parameters.tag }}" ] && echo ${{ parameters.tag }} || echo $(node -p "require('./config.json').zeromqTag")`
      git clone https://github.com/${REPO}.git zeromq.js
      cd zeromq.js
      git checkout $TREEISH

- task: Bash@3
  displayName: Patch zeromq.js
  inputs:
    targetType: 'inline'
    script: |
      node ./build/patch.js

- ${{ if and(eq(parameters.docker, false), eq(parameters.build, true), ne(parameters.ARCH, '')) }}:
  - bash: |
      npm install
      npm run prebuild
    displayName: Build
    condition: and(succeeded(), eq('${{ parameters.build }}', 'true'), eq('${{ parameters.docker }}', 'false'), ne('${{ parameters.ARCH }}', ''))
    workingDirectory: zeromq.js
    env:
      ARCH: ${{ parameters.ARCH }}
      npm_config_arch: ${{ parameters.npm_config_arch }}

- ${{ if and(eq(parameters.docker, false), eq(parameters.build, true), eq(parameters.ARCH, '')) }}:
  - bash: |
      npm install
      npm run prebuild
    displayName: Build
    condition: and(succeeded(), eq('${{ parameters.build }}', 'true'), eq('${{ parameters.docker }}', 'false'), eq('${{ parameters.ARCH }}', ''))
    workingDirectory: zeromq.js
    env:
      npm_config_arch: ${{ parameters.npm_config_arch }}

- ${{ if and(eq(parameters.docker, true), eq(parameters.build, true)) }}:
  - task: DockerInstaller@0

- ${{ if and(eq(parameters.docker, true), eq(parameters.build, true)) }}:
  - task: Docker@2
    displayName: 'Log into VSCodeHub'
    inputs:
      containerRegistry: VSCodeHub
      repository:  'vscode-linux-build-agent'
      command: 'login'

- ${{ if and(eq(parameters.docker, true), eq(parameters.build, true)) }}:
  - task: Docker@1
    displayName: 'Run vscode-linux-build-agent'
    inputs:
      # azureSubscriptionEndpoint: "vscode-builds-subscription"
      azureContainerRegistry: vscodehub.azurecr.io
      imageName:  'vscode-linux-build-agent:centos7-devtoolset8-x64'
      command: "Run an image"
      # workingDirectory: $(Build.SourcesDirectory)/zeromq.js
      volumes:
        $(Build.SourcesDirectory)/zeromq.js:/app
      containerCommand: 'pwd && uname -a && $DOCKERCMD'
      envVars:
        CURRENDIR=$(Build.SourcesDirectory)
        DOCKERCMD=cmake --version && pwd && npm i -g pnpm && GCC=8 pnpm install && GCC=8 pnpm run prebuild

- ${{ if and(eq(parameters.docker, true), eq(parameters.build, true)) }}:
  - task: Docker@0
    displayName: 'Run vscode-linux-build-agent'
    inputs:
      azureContainerRegistry: VSCodeHub
      repository:  'vscode-linux-build-agent'
      imageName:  'vscode-linux-build-agent:centos7-devtoolset8-x64'
      command: 'Run a Docker command'
      workingDirectory: $(Build.SourcesDirectory)/zeromq.js
      volumes:
        $(Build.SourcesDirectory)/zeromq.js:/app
      containerCommand: 'run --volume $(Build.SourcesDirectory)/zeromq.js:/app --workdir /app --privileged vscode-linux-build-agent sh -c "pwd && pwd && npm i -g pnpm && pnpm install && pnpm run prebuild"'

- ${{ if and(eq(parameters.docker, true), eq(parameters.build, true), eq('${{ parameters.ARCH }}', 'x64')) }}:
  - task: Bash@3
    displayName: 'Build x64 in Docker'
    env:
      CURRENDIR: $(Build.SourcesDirectory)
      DOCKERCMD: cmake --version && pwd && npm i -g pnpm && GCC=8 pnpm install && GCC=8 pnpm run prebuild
    inputs:
      targetType: 'inline'
      workingDirectory: zeromq.js
      script: |
          docker run --volume $CURRENDIR/zeromq.js:/app --workdir /app --privileged vscodehub.azurecr.io/vscode-linux-build-agent sh -c "$DOCKERCMD"

- ${{ if and(eq(parameters.docker, true), eq(parameters.build, true), eq('${{ parameters.ARCH }}', 'arm64')) }}:
  - task: Bash@3
    displayName: 'Build arm64 in Docker'
    env:
      CURRENDIR: $(Build.SourcesDirectory)
      DOCKERCMD: cmake --version && pwd && npm i -g pnpm && ARCH=arm64 npm_config_arch=arm64 TRIPLE=aarch64-linux-gnu GCC=8 ARCHIVE_SUFFIX=-armv8 pnpm install && ARCH=arm64 npm_config_arch=arm64 TRIPLE=aarch64-linux-gnu GCC=8 ARCHIVE_SUFFIX=-armv8 pnpm run prebuild
    inputs:
      targetType: 'inline'
      workingDirectory: zeromq.js
      script: |
          docker run --volume $CURRENDIR/zeromq.js:/app --workdir /app --privileged vscode-linux-build-agent sh -c "$DOCKERCMD"

- ${{ if and(eq(parameters.docker, true), eq(parameters.build, true), eq('${{ parameters.ARCH }}', 'arm')) }}:
  - task: Bash@3
    displayName: 'Build arm64 in Docker'
    env:
      CURRENDIR: $(Build.SourcesDirectory)
      DOCKERCMD: cmake --version && pwd && npm i -g pnpm && ARCH=arm npm_config_arch=arm TRIPLE=aarch-linux-gnueabihf GCC=8 ARCHIVE_SUFFIX=-armv7 pnpm install && ARCH=arm npm_config_arch=arm TRIPLE=aarch-linux-gnueabihf GCC=8 ARCHIVE_SUFFIX=-armv7 pnpm run prebuild
    inputs:
      targetType: 'inline'
      workingDirectory: zeromq.js
      script: |
          docker run --volume $CURRENDIR/zeromq.js:/app --workdir /app --privileged vscode-linux-build-agent sh -c "$DOCKERCMD"

- ${{ if eq(parameters.build, true) }}:
  - template: artifacts.yml
    parameters:
      artifact_name: ${{ parameters.artifact_name }}
      prebuild_folder_name: ${{ parameters.prebuild_folder_name }}
      output_node_file: ${{ parameters.output_node_file }}
      test: ${{ parameters.test }}
