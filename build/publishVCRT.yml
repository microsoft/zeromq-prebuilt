steps:

- task: NodeTool@0
  inputs:
    versionSource: 'spec'
    versionSpec: '18.x'

- task: Bash@3
  inputs:
    filePath: 'build/system32.sh'
  name: SYSTEM32

- bash: |
    echo '$SYSTEM32/msvcp140.dll'
    echo '$(SYSTEM32)/msvcp140.dll'
    echo '$(env:SYSTEM32)/msvcp140.dll'
    echo '$(env.SYSTEM32)/msvcp140.dll'
  displayName: Copy files

- bash: |
    echo '$(SYSTEM32.value)/msvcp140.dll'
  displayName: Copy files

- displayName: Get SYSTEM32 directory
  # id: system32
  bash: |
    echo $(node -p -e "process.env.SYSTEM32")
    echo ::set-output name=result::$(node -p -e "process.env.SYSTEM32")

- bash: |
    echo '$SYSTEM32/msvcp140.dll'
    echo '$(SYSTEM32)/msvcp140.dll'
    echo '$(env:SYSTEM32)/msvcp140.dll'
    echo '$(env.SYSTEM32)/msvcp140.dll'
  displayName: Copy files
  env:
      SYSTEM32: ${{steps.system32.outputs.result}}

- bash: |
    echo '$SYSTEM32/msvcp140.dll'
    echo '$(SYSTEM32)/msvcp140.dll'
    echo '%SYSTEM32%/msvcp140.dll'
    echo '$(env:SYSTEM32)/msvcp140.dll'
  displayName: Copy files
  env:
    SYSTEM32: $SYSTEM32

- bash: |
    echo '$SYSTEM32/msvcp140.dll'
    echo '$(SYSTEM32)/msvcp140.dll'
    echo '%SYSTEM32%/msvcp140.dll'
    echo '$(env:SYSTEM32)/msvcp140.dll'
  displayName: Copy files
  env:
    SYSTEM32: $env:SYSTEM32

- bash: |
    echo '$SYSTEM32/msvcp140.dll'
    echo '$(SYSTEM32)/msvcp140.dll'
    echo '%SYSTEM32%/msvcp140.dll'
    echo '$(env:SYSTEM32)/msvcp140.dll'
  displayName: Copy files
  env:
    SYSTEM32: $(SYSTEM32)

- bash: |
    cp '$SYSTEM32/msvcp140.dll' '$(Build.ArtifactsDirectory)/msvcp140.dll'
    cp '$SYSTEM32/vcruntime140.dll' '$(Build.ArtifactsDirectory)/vcruntime140.dll'
    cp '$SYSTEM32/vcruntime140_1.dll' '$(Build.ArtifactsDirectory)/vcruntime140_1.dll'
  displayName: Copy files
  env:
    SYSTEM32: $(SYSTEM32)

- task: PublishPipelineArtifact@0
  displayName: 'Publish Pipeline Artifact'
  inputs:
    artifactName: VCRT
    targetPath: $(Build.ArtifactsDirectory)

- task: GitHubRelease@0
  inputs:
    gitHubConnection: 'zeromq-prebuilt'
    repositoryName: '$(Build.Repository.Name)'
    action: 'create'
    target: '$(Build.SourceVersion)'
    tagSource: 'auto'
    tag: 'VCRT'
    assets: '$(System.ArtifactsDirectory)/**'
    addChangeLog: false
