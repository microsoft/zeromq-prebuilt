trigger:
  tags:
    include:
    - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: microsoft/vscode-engineering
      ref: main
      endpoint: Monaco
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

parameters:
  - name: testGitHubRelease
    displayName: ðŸš€ Test Github Release
    type: boolean
    default: false

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
      sourceAnalysisPool: 1es-windows-2022-x64
      tsa:
        enabled: true
    stages:
      - stage: Build
        jobs:
          - job: win32_x64
            pool:
              name: 1es-windows-2022-x64
              os: windows
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: 'win32-x64'
            steps:
              - template: build/build.yml@self
                parameters:
                  artifact_name: 'win32-x64'
                  prebuild_folder_name: 'win32-x64'
                  output_node_file: 'zeromq.glibc.node'

          - job: win32_arm64
            pool:
              name: 1es-windows-2022-x64
              os: windows
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: 'win32-arm64'
            steps:
              - template: build/build.yml@self
                parameters:
                  ARCH: arm64
                  npm_config_arch: arm64
                  node_version: '20.x'
                  artifact_name: 'win32-arm64'
                  prebuild_folder_name: 'win32-arm64'
                  output_node_file: 'zeromq.glibc.node'
                  test: false

          - job: darwin_x64
            pool:
              name: Azure Pipelines
              vmImage: 'macOS-latest'
              os: macOS
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: 'darwin-x64'
            steps:
              - template: build/build.yml@self
                parameters:
                  ARCH: ''
                  artifact_name: 'darwin-x64'
                  prebuild_folder_name: 'darwin-x64'
                  output_node_file: 'zeromq.glibc.node'

          - job: darwin_arm64
            pool:
              name: Azure Pipelines
              vmImage: 'macOS-latest'
              os: macOS
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: 'darwin-arm64'
            steps:
              - template: build/build.yml@self
                parameters:
                  ARCH: arm64
                  artifact_name: 'darwin-arm64'
                  prebuild_folder_name: 'darwin-arm64'
                  output_node_file: 'zeromq.glibc.node'
                  test: false

          - job: linux_x64_glibc
            pool:
              name: '1es-ubuntu-22.04-x64'
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: 'linux-x64'
            steps:
              - template: azure-pipelines/common/steps/setup-linux-toolchains.yml@templates
                parameters:
                  arch: x64
                  nodeVersion: '20.x'
              - template: build/build.yml@self
                parameters:
                  ARCH: x64
                  artifact_name: 'linux-x64'
                  prebuild_folder_name: 'linux-x64'
                  yum_install_python: false
                  install_node: false
                  output_node_file: 'zeromq.glibc.node'
              - template: azure-pipelines/common/steps/verify-platform-requirements.yml@templates
                parameters:
                  arch: x64

          - job: linux_arm64_glibc
            pool:
              name: '1es-ubuntu-22.04-x64'
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: 'linux-arm64-glibc'
            steps:
              - template: azure-pipelines/common/steps/setup-linux-toolchains.yml@templates
                parameters:
                  arch: arm64
                  nodeVersion: '20.x'
              - template: build/build.yml@self
                parameters:
                  ARCH: arm64
                  npm_config_arch: arm64
                  ARCHIVE_SUFFIX: -armv8
                  artifact_name: 'linux-arm64-glibc'
                  prebuild_folder_name: 'linux-arm64'
                  yum_install_python: false
                  test: false
                  install_node: false
                  output_node_file: 'zeromq.glibc.node'
              - template: azure-pipelines/common/steps/verify-platform-requirements.yml@templates
                parameters:
                  arch: arm64

          - job: linux_armhf_glibc
            pool:
              name: '1es-ubuntu-22.04-x64'
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: 'linux-armhf-glibc'
            steps:
              - template: azure-pipelines/common/steps/setup-linux-toolchains.yml@templates
                parameters:
                  arch: armhf
                  nodeVersion: '20.x'
              - template: build/build.yml@self
                parameters:
                  ARCH: arm
                  npm_config_arch: arm
                  ARCHIVE_SUFFIX: -armv7
                  artifact_name: 'linux-armhf-glibc'
                  prebuild_folder_name: 'linux-arm'
                  yum_install_python: false
                  test: false
                  install_node: false
                  output_node_file: 'zeromq.glibc.node'
              - template: azure-pipelines/common/steps/verify-platform-requirements.yml@templates
                parameters:
                  arch: armhf

          - job: alpine_x64_musl
            pool:
              name: '1es-ubuntu-22.04-x64'
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: alpine-x64-musl
            steps:
              - template: build/build.yml@self
                parameters:
                  build: false
                  test: false

              - task: DockerInstaller@0
                inputs:
                  dockerVersion: '27.0.3'

              - task: Bash@3
                displayName: Build
                env:
                  CURRENTDIR: $(Build.SourcesDirectory)
                  DOCKERCMD: >
                    addgroup -g 1001 node && adduser -u 1001 -G node -s /bin/sh -D node && HOME=/home/node &&
                    apk add --no-cache pkgconfig curl tar python3 make gcc g++ cmake libbsd-dev musl-dev npm patch &&
                    npm i -g pnpm@latest-8 && pnpm install && npm run prebuild
                inputs:
                  targetType: 'inline'
                  workingDirectory: zeromq.js
                  script: |
                      docker pull mcr.microsoft.com/devcontainers/base:alpine-3.17
                      docker tag mcr.microsoft.com/devcontainers/base:alpine-3.17 builder
                      docker run --volume ${CURRENTDIR}/zeromq.js:/app --workdir /app --privileged builder sh -c "${DOCKERCMD}"

              - template: build/artifacts.yml@self
                parameters:
                  artifact_name: alpine-x64-musl
                  prebuild_folder_name: 'linux-x64'
                  output_node_file: 'zeromq.musl.node'
                  test: false


          - job: alpine_arm64_musl
            pool:
              name: '1es-ubuntu-22.04-x64'
              os: linux
            templateContext:
              outputs:
                - output: pipelineArtifact
                  targetPath: $(Build.ArtifactStagingDirectory)
                  artifactName: alpine-arm64-musl
            steps:
              - template: build/build.yml@self
                parameters:
                  build: false
                  test: false

              - task: DockerInstaller@0
                inputs:
                  dockerVersion: '27.0.3'

              - task: Bash@3
                displayName: Build
                env:
                  CURRENTDIR: $(Build.SourcesDirectory)
                  DOCKERCMD: >
                    addgroup -g 1001 node && adduser -u 1001 -G node -s /bin/sh -D node && HOME=/home/node &&
                    apk add --no-cache pkgconfig curl tar python3 make gcc g++ cmake libbsd-dev musl-dev npm patch &&
                    npm i -g cross-env pnpm@latest-8 && cross-env ARCH=arm64 npm_config_arch=arm64 pnpm install && cross-env ARCH=arm64 npm_config_arch=arm64 npm run prebuild
                inputs:
                  targetType: 'inline'
                  workingDirectory: zeromq.js
                  script: |
                      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
                      docker pull --platform linux/arm64/v8 mcr.microsoft.com/devcontainers/base:alpine-3.17
                      docker tag mcr.microsoft.com/devcontainers/base:alpine-3.17 builder
                      docker run --volume ${CURRENTDIR}/zeromq.js:/app --workdir /app --privileged builder sh -c "${DOCKERCMD}"

              - template: build/artifacts.yml@self
                parameters:
                  artifact_name: alpine-arm64-musl
                  prebuild_folder_name: 'linux-arm64'
                  output_node_file: 'zeromq.musl.node'
                  test: false

      - stage: publish
        dependsOn: Build
        pool:
          name: '1es-ubuntu-22.04-x64'
          os: linux
        condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq('${{ parameters.testGitHubRelease }}', 'true')))
        jobs:
          - job: publish
            templateContext:
              type: releaseJob
              isProduction: true
              inputs:
              - input: pipelineArtifact
                artifactName: win32-x64
                targetPath: $(System.ArtifactsDirectory)/win32-x64
              - input: pipelineArtifact
                artifactName: win32-arm64
                targetPath: $(System.ArtifactsDirectory)/win32-arm64
              - input: pipelineArtifact
                artifactName: darwin-x64
                targetPath: $(System.ArtifactsDirectory)/darwin-x64
              - input: pipelineArtifact
                artifactName: darwin-arm64
                targetPath: $(System.ArtifactsDirectory)/darwin-arm64
              - input: pipelineArtifact
                artifactName: linux-x64
                targetPath: $(System.ArtifactsDirectory)/linux-x64
              - input: pipelineArtifact
                artifactName: linux-arm64-glibc
                targetPath: $(System.ArtifactsDirectory)/linux-arm64-glibc
              - input: pipelineArtifact
                artifactName: linux-armhf-glibc
                targetPath: $(System.ArtifactsDirectory)/linux-armhf-glibc
              - input: pipelineArtifact
                artifactName: alpine-x64-musl
                targetPath: $(System.ArtifactsDirectory)/alpine-x64-musl
              - input: pipelineArtifact
                artifactName: alpine-arm64-musl
                targetPath: $(System.ArtifactsDirectory)/alpine-arm64-musl
            steps:
              - template: build/publish.yml@self
                parameters:
                  testGitHubRelease: ${{ parameters.testGitHubRelease }}
