trigger:
  tags:
    include:
    - '*'

resources:
  repositories:
    - repository: templates
      type: github
      name: microsoft/vscode-engineering
      ref: main
      endpoint: Monaco
    - repository: 1esPipelines
      type: git
      name: 1ESPipelineTemplates/1ESPipelineTemplates
      ref: refs/tags/release

parameters:
  - name: testGitHubRelease
    displayName: ðŸš€ Test Github Release
    type: boolean
    default: false

extends:
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    sdl:
        sourceAnalysisPool: 1es-windows-2019-x64
        tsa:
          enabled: true
    stages:
      - stage: Build
        jobs:
          - job: win32_x64
            pool:
              name: 1es-windows-2019-x64
              os: windows
            steps:
              - template: build.yml@self
                parameters:
                  artifact_name: 'win32-x64'
                  prebuild_folder_name: 'win32-x64'
                  output_node_file: 'node.napi.glibc.node'

          - job: win32_arm64
            pool:
              name: 1es-windows-2019-x64
              os: windows
            steps:
              - template: build.yml@self
                parameters:
                  ARCH: arm64
                  npm_config_arch: arm64
                  node_version: '19.x'
                  artifact_name: 'win32-arm64'
                  prebuild_folder_name: 'win32-arm64'
                  output_node_file: 'node.napi.glibc.node'
                  test: false

          - job: darwin_x64
            pool:
              vmImage: 'macOS-latest'
              os: macOS
            steps:
              - template: build.yml@self
                parameters:
                  ARCH: ''
                  artifact_name: 'darwin-x64'
                  prebuild_folder_name: 'darwin-x64'
                  output_node_file: 'node.napi.glibc.node'

          - job: darwin_arm64
            pool:
              vmImage: 'macOS-latest'
              os: macOS
            steps:
              - template: build.yml@self
                parameters:
                  ARCH: arm64
                  artifact_name: 'darwin-arm64'
                  prebuild_folder_name: 'darwin-arm64'
                  output_node_file: 'node.napi.glibc.node'
                  test: false

          - template: azure-pipelines/npm-package/templates/jobs/compile.yml@templates
            parameters:
              jobDisplayName: linux_x64_glibc
              jobPlatformName: Linux_x64_glibc
              testNodeVersion: '18.x'
              timeoutInMinutes: 30
              testSteps:
                - template: build.yml@self
                  parameters:
                    ARCH: x64
                    artifact_name: 'linux-x64'
                    prebuild_folder_name: 'linux-x64'
                    yum_install_python: false
                    install_node: false
                    output_node_file: 'node.napi.glibc.node'

          - template: azure-pipelines/npm-package/templates/jobs/compile.yml@templates
            parameters:
              jobDisplayName: linux_arm64_glibc
              jobPlatformName: Linux_arm64_glibc
              testNodeVersion: '18.x'
              timeoutInMinutes: 30
              targetArch: arm64
              testSteps:
                - template: build.yml@self
                  parameters:
                    ARCH: arm64
                    npm_config_arch: arm64
                    ARCHIVE_SUFFIX: -armv8
                    artifact_name: linux-arm64-glibc
                    prebuild_folder_name: 'linux-arm64'
                    yum_install_python: false
                    test: false
                    install_node: false
                    output_node_file: 'node.napi.glibc.node'

          - template: azure-pipelines/npm-package/templates/jobs/compile.yml@templates
            parameters:
              jobDisplayName: linux_armhf_glibc
              jobPlatformName: Linux_armhf_glibc
              testNodeVersion: '18.x'
              timeoutInMinutes: 30
              targetArch: armhf
              testSteps:
                - template: build.yml@self
                  parameters:
                    ARCH: arm
                    npm_config_arch: arm
                    ARCHIVE_SUFFIX: -armv7
                    artifact_name: linux-armhf-glibc
                    prebuild_folder_name: 'linux-arm'
                    yum_install_python: false
                    test: false
                    install_node: false
                    output_node_file: 'node.napi.glibc.node'

          - job: alpine_x64_musl
            pool:
              vmImage: '1es-ubuntu-22.04-x64'
              os: linux
            steps:
              - template: build.yml@self
                parameters:
                  build: false
                  test: false

              - task: DockerInstaller@0
                inputs:
                  dockerVersion: '17.09.0-ce'

              - task: Bash@3
                displayName: Build
                env:
                  CURRENDIR: $(Build.SourcesDirectory)
                  DOCKERCMD: apk add --no-cache pkgconfig curl tar python3 make gcc g++ cmake musl-dev && npm install && npm run prebuild
                inputs:
                  targetType: 'inline'
                  workingDirectory: zeromq.js
                  script: |
                      docker pull node:14.16.0-alpine
                      docker tag node:14.16.0-alpine builder
                      docker run --volume $CURRENDIR/zeromq.js:/app --workdir /app --privileged builder sh -c "$DOCKERCMD"

              - template: artifacts.yml@self
                parameters:
                  artifact_name: alpine-x64-musl
                  prebuild_folder_name: 'linux-x64'
                  output_node_file: 'node.napi.musl.node'
                  test: false


          - job: alpine_arm64_musl
            pool:
              vmImage: '1es-ubuntu-22.04-x64'
              os: linux
            steps:
              - template: build.yml@self
                parameters:
                  build: false
                  test: false

              - task: DockerInstaller@0
                inputs:
                  dockerVersion: '17.09.0-ce'

              - task: Bash@3
                displayName: Build
                env:
                  CURRENDIR: $(Build.SourcesDirectory)
                  DOCKERCMD: apk add --no-cache pkgconfig curl tar python3 make gcc g++ cmake musl-dev && npm i -g cross-env && cross-env ARCH=arm64 npm_config_arch=arm64 npm install && cross-env ARCH=arm64 npm_config_arch=arm64 npm run prebuild
                inputs:
                  targetType: 'inline'
                  workingDirectory: zeromq.js
                  script: |
                      docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
                      docker pull arm64v8/node:14.16.0-alpine
                      docker tag arm64v8/node:14.16.0-alpine builder
                      docker run --volume $CURRENDIR/zeromq.js:/app --workdir /app --privileged builder sh -c "$DOCKERCMD"

              - template: artifacts.yml
                parameters:
                  artifact_name: alpine-arm64-musl
                  prebuild_folder_name: 'linux-arm64'
                  output_node_file: 'node.napi.musl.node'
                  test: false

      - stage: publish
        dependsOn: Build
        pool:
          vmImage: '1es-ubuntu-22.04-x64'
          os: linux
        condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/tags/'), eq('${{ parameters.testGitHubRelease }}', 'true')))
        steps:
          - template: publish.yml
            parameters:
              testGitHubRelease: ${{ parameters.testGitHubRelease }}
